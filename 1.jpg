if ( matches_regular_expression( v.syslog_message , '^[0-9A-Za-z ]*APPFW ' ) ) then (
		set_collected_field('', 'event_type', '');
		set_collected_field('', 'source_ip', '');
#   set_collected_field('', 'session_id', '');
		set_collected_field('', 'profile', '');
		set_collected_field('', 'url', '');
		set_collected_field('', 'message', '');
		set_collected_field('', 'result', '');
		set_collected_field('', 'field', '');
		set_collected_field('', 'server_hostname', '');
	
	if (matches_regular_expression(v.syslog_message, '^[0-9A-Za-z ]*APPFW(_RESP)? ([0-9A-Z_]+) [0-9 ]+:[ ]+([0-9a-z.:]+)[ ]+([0-9]+-PPE[0-9]+ )?([0-9a-zA-Z+/]{27,30}[0-9]{1,3} |- )?([^ "/]{1,31}) (.+)$')) then (	
		set_collected_field('', 'event_type', replace_first( $2, 'APPFW_', '' ) );
		set_collected_field('', 'source_ip', $3);
#   set_collected_field('', 'session_id', $5);
		set_collected_field('', 'profile', $6);

		v.message = $7;

# AF_400_RESP
		if( get_collected_field('', 'event_type') eq 'AF_400_RESP' ) then (
#			set_collected_field('', 'event_type', 'Protocol ERROR');
			if( matches_regular_expression( v.message, '^([^ ]+) (Unable .*) <([a-z ]+)>$' )) then (
				set_collected_field('', 'host', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
			) else if( matches_regular_expression( v.message, '^([^ ]+) (Syntax error .*) <([a-z ]+)>$' )) then (
				set_collected_field('', 'host', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
			) else if( matches_regular_expression( v.message, '^(.*) (Bad request headers.No host header) <([a-z ]+)>$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
			) else if( matches_regular_expression( v.message, '^(.*) (Bad request headers.*) <([a-z ]+)>$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
			) else if( matches_regular_expression( v.message, '^(http[^ ]+)?(.+) <([a-z ]+)>$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
			) else if( matches_regular_expression( v.message, '^(http[^ ]+)?(.+)$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', 'blocked');
			) else (
				set_collected_field('', 'result', 'PARSE ERROR for AF_400_RESP');
				set_collected_field('', 'message', v.message);
			);
		);
# POLICY_HIT|POLICY_HIT_BUILTIN
		else if( starts_with( get_collected_field('', 'event_type') , 'POLICY_HIT_BUILTIN' ) ) then (
			if( matches_regular_expression( v.message, '^([^ ]+) ([^<]+)( <([a-z ]+)>)?$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				if( $4 eq '' ) then (
					set_collected_field('', 'result', 'none');
				) else (
					set_collected_field('', 'result', $4);
				);
			); else (
				set_collected_field('', 'result', 'PARSE ERROR For POLICY_HIT_BUILTIN');
				set_collected_field('', 'message', v.message);
			);
		);
# STARTURL
		else if( matches_regular_expression( get_collected_field('', 'event_type') , '^STARTURL$' )) then (
			if( matches_regular_expression( v.message, '^(Disallow Illegal URL: (.*)) <([a-z ]+)>$' )) then (
				set_collected_field('', 'message', $1);
				set_collected_field('', 'url', $2);
				set_collected_field('', 'result', $3);
			);
			else if( matches_regular_expression( v.message, '^(Disallow Illegal URL: (.*))<([a-z ]+)>$' )) then (
				set_collected_field('', 'message', $1);
				set_collected_field('', 'url', $2);
				set_collected_field('', 'result', $3);
			);
			else if( matches_regular_expression( v.message, '^(Disallow Illegal URL: (.*))$' )) then (
				set_collected_field('', 'message', $1);
				set_collected_field('', 'url', $2);
				set_collected_field('', 'result', 'blocked');
			);
			else if( matches_regular_expression( v.message, '^(.*)(Disallow Illegal URL: (.*)) <([a-z ]+)>$' )) then (
			  set_collected_field('', 'profile', get_collected_field('', 'profile') . ' ' .$1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'url', $3);
				set_collected_field('', 'result', $4);
			);
			else if( matches_regular_expression( v.message, '^(.*)(Disallow Illegal URL: (.*))<([a-z ]+)>$' )) then (
			  set_collected_field('', 'profile', get_collected_field('', 'profile') . ' ' .$1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'url', $3);
				set_collected_field('', 'result', $4);
			);
			else if( matches_regular_expression( v.message, '^(.*)(Disallow Illegal URL: (.*))$' )) then (
			  set_collected_field('', 'profile', get_collected_field('', 'profile') . ' ' .$1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'url', $3);
				set_collected_field('', 'result', 'blocked');
			); else (
				set_collected_field('', 'result', 'PARSE ERROR for START URL');
				set_collected_field('', 'message', v.message);
			);
		);
# DENYURL
		else if( matches_regular_expression( get_collected_field('', 'event_type') , '^DENYURL$' )) then (
			if( matches_regular_expression( v.message, '^Disallow Deny URL: (.*) for rule (pattern=.*) <([a-z ]+)>$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
			);
			else if( matches_regular_expression( v.message, '^(Disallow Deny URL: (.*)) <([a-z ]+)>$' )) then (
				set_collected_field('', 'message', $1);
				set_collected_field('', 'url', $2);
				set_collected_field('', 'result', $3);
			);
			else if( matches_regular_expression( v.message, '^(Disallow Deny URL: (.*))<([a-z ]+)>$' )) then (
				set_collected_field('', 'message', $1);
				set_collected_field('', 'url', $2);
				set_collected_field('', 'result', $3);
			);
			else if( matches_regular_expression( v.message, '^(Disallow Deny URL: (.*))$' )) then (
				set_collected_field('', 'message', $1);
				set_collected_field('', 'url', $2);
				set_collected_field('', 'result', 'blocked');
			); else (
				set_collected_field('', 'result', 'PARSE ERROR for DENY URL');
				set_collected_field('', 'message', v.message);
			);
		);
# BUFFEROVERFLOW
		else if( starts_with( get_collected_field('', 'event_type'), 'BUFFEROVERFLOW' ) ) then (
			if( matches_regular_expression( v.message, '^([^:]+): (.+) <([a-z ]+)>$' )) then (
				set_collected_field('', 'message', $1);
				set_collected_field('', 'url', $2);
				set_collected_field('', 'result', $3);

				if( get_collected_field('', 'event_type') eq 'BUFFEROVERFLOW_HDR' ) then (
					if( matches_regular_expression( get_collected_field('', 'message'), 'Header[(]([^)]+)[)]' )) then (
						set_collected_field('', 'field', $1);
					);
					else (
						set_collected_field('', 'result', 'PARSE ERROR for BUFFEROVERFLOW_HDR');
						set_collected_field('', 'message', v.message);
					);
				);
			);
			else if( matches_regular_expression( v.message, '^(URL length[^:]+): (.+) <([a-z ]+)>$' )) then (
				set_collected_field('', 'message', v.message);
				set_collected_field('', 'url', $2);
				set_collected_field('', 'result', $3);
			);
			else if( matches_regular_expression( v.message, '^(Cookie header length[^:]+): (.+) <([a-z ]+)>$' )) then (
				set_collected_field('', 'message', v.message);
				set_collected_field('', 'url', $2);
				set_collected_field('', 'result', $3);
			);
			else (
				set_collected_field('', 'result', 'PARSE ERROR for BUFFEROVERFLOW');
				set_collected_field('', 'message', v.message);
			);
		);
# REFERER_HEADER|CSRF_TAG
		else if( matches_regular_expression( get_collected_field('', 'event_type') , '^(REFERER_HEADER|CSRF_TAG)$' )) then (
			if( matches_regular_expression( v.message, '^([^ ]+) (.+) <([a-z ]+)>$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
			); else (
				set_collected_field('', 'result', 'PARSE ERROR6');
				set_collected_field('', 'message', v.message);
			);
		);
# XSS|APPFW_XML_XSS
		else if( matches_regular_expression( get_collected_field('', 'event_type') , '^(XSS|XML_XSS)$' )) then (
			if( matches_regular_expression( v.message, '^(.+) (Cross-site script .+) <([a-z ]+)>$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
			);
			else if( matches_regular_expression( v.message, '^(.+) (Cross-site script .+)<([a-z ]+)>$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
			);
			else if( matches_regular_expression( v.message, '^(.+) (Cross-site script .+)$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', 'not blocked');
			);
			else if( matches_regular_expression( v.message, '^(.*)(script .+)$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', 'Cross-site'.$2);
				set_collected_field('', 'result', 'not blocked');
			);
			else (
				set_collected_field('', 'result', 'PARSE ERROR for XSS');
				set_collected_field('', 'message', v.message);
			);
			if( matches_regular_expression( get_collected_field('', 'message'), 'for( field | header | cookie | )([^ =]+)' )) then (
				set_collected_field('', 'field', $2);
			);
		);
# SQL|XML_SQL
		else if( matches_regular_expression( get_collected_field('', 'event_type') , '^(SQL|XML_SQL)$' )) then (
			if( matches_regular_expression( v.message, '^(.+) (SQL Keyword check .+) <([a-z ]+)>$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
			);
			else if( matches_regular_expression( v.message, '^(.+) (SQL Keyword check .+)<([a-z ]+)>$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
			);
			else if( matches_regular_expression( v.message, '^(.+) (Special characters seen in fields.*) <(transformed)>$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
			);
			else if( matches_regular_expression( v.message, '^(.+) (SQL Special characters seen) <(transformed)>$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
			);
			else if( matches_regular_expression( v.message, '^(.+) (SQL Keyword check .+)$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', 'not blocked');
			);
			else (
				set_collected_field('', 'result', 'PARSE ERROR for SQL');
				set_collected_field('', 'message', v.message);
			);
			if( matches_regular_expression( get_collected_field('', 'message'), 'for( field | header | cookie | )([^ =]+)' )) then (
				set_collected_field('', 'field', $2);
			);
		);
# FIELDFORMAT
		else if( matches_regular_expression( get_collected_field('', 'event_type') , '^FIELDFORMAT$' )) then (
			if( matches_regular_expression( v.message, '^(.*) (Field format check .*) <([a-z ]+)>$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
			);
			else if( matches_regular_expression( v.message, '^(.*) (Field format check .*)<([a-z ]+)>$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
			);
			else if( matches_regular_expression( v.message, '^(.*) (format check .*)<([a-z ]+)>$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', 'FIeld'.$2);
				set_collected_field('', 'result', $3);
			);
			else if( matches_regular_expression( v.message, '^(.*) (Field format check .*)$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', 'not blocked');
			);
			else (
				set_collected_field('', 'result', 'PARSE ERROR for Field Format');
				set_collected_field('', 'message', v.message);
			);
			if( matches_regular_expression( get_collected_field('', 'message'), 'for( field | header | cookie | )([^ =]+)' )) then (
				set_collected_field('', 'field', $2);
			);
		);
# FIELDCONSISTENCY|COOKIE
		else if( matches_regular_expression( get_collected_field('', 'event_type') , '^(FIELDFORMAT|FIELDCONSISTENCY|COOKIE)$' )) then (
			if( matches_regular_expression( v.message, '^([^ ]+) (.+) <([a-z ]+)>$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
			); else (
				set_collected_field('', 'result', 'PARSE ERROR for Consisiency');
				set_collected_field('', 'message', v.message);
			);
			if( matches_regular_expression( get_collected_field('', 'message'), 'for( field | header | cookie | )([^ =]+)' )) then (
				set_collected_field('', 'field', $2);
			);
		);
# SAFECOMMERCE
		else if( matches_regular_expression( get_collected_field('', 'event_type') , '^(SAFECOMMERCE|SAFECOMMERCE_XFORM)$' )) then (
			if( matches_regular_expression( v.message, '^([^ ]+) ([^<]+)( <([a-z ]+)>)?$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				if( get_collected_field('', 'event_type') eq 'SAFECOMMERCE_XFORM' ) then (
					set_collected_field('', 'result', 'transformed');
				)
				else if( $4 eq '' ) then (
					set_collected_field('', 'result', 'none');
				) else (
					set_collected_field('', 'result', $4);
				);
			); else (
				set_collected_field('', 'result', 'PARSE ERROR for SAFECOMMERCE');
				set_collected_field('', 'message', v.message);
			);
		);
# SIGNATURE_MATCH
		else if( matches_regular_expression( get_collected_field('', 'event_type') , '^SIGNATURE_MATCH$' )) then (
			if( matches_regular_expression( v.message, '^(.+) (Signature violation rule .+) <([a-z ]+)>$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
			); else (
				set_collected_field('', 'result', 'PARSE ERROR for SIGNATURE_MATCH');
				set_collected_field('', 'message', v.message);
			);
		);
# SAFEOBJECT|MAX_UPLOADS|SIGNATURE_MATCH
		else if( matches_regular_expression( get_collected_field('', 'event_type') , '^(SAFEOBJECT|MAX_UPLOADS)$' )) then (
			if( matches_regular_expression( v.message, '^(.+) (Match found with .+) <([a-z ]+)>$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message_full', $2);
				set_collected_field('', 'result', $3);
			); else (
				set_collected_field('', 'result', 'PARSE ERROR for SafeO/MAXUPLOADS/SIG');
				set_collected_field('', 'message', v.message);
			);
		);
# XML_ERR_SOAP_FAULT
		else if( matches_regular_expression( get_collected_field('', 'event_type') , '^XML_ERR_SOAP_FAULT$' )) then (
			if( matches_regular_expression( v.message, '^(.+) (XML SOAP Fault check .+) <([a-z ]+)>$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
			);
			else if( matches_regular_expression( v.message, '^(.+) (XML SOAP Fault check .+)$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
				set_collected_field('', 'result', 'not blocked');
			);
			else (
				set_collected_field('', 'result', 'PARSE ERROR for XML_ERR_SOAP_FAULT');
				set_collected_field('', 'message', v.message);
			);
		);
# XML_GENERIC_ERR_EMPTYBODY_REQ
		else if( matches_regular_expression( get_collected_field('', 'event_type') , '^XML_GENERIC_ERR_EMPTYBODY_REQ$' )) then (
			if( matches_regular_expression( v.message, '^(.+) XML Generic error occurred:(.+) <([a-z ]+)>$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
			);
			else if( matches_regular_expression( v.message, '^(.+) XML Generic error occurred:(.+)$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
				set_collected_field('', 'result', 'not blocked');
			);
			else (
				set_collected_field('', 'result', 'PARSE ERROR for XML_GENERIC_ERR_EMPTYBODY_REQ');
				set_collected_field('', 'message', v.message);
			);
		);
# XML_ERR_NOT_WELLFORMED
		else if( matches_regular_expression( get_collected_field('', 'event_type') , '^XML_ERR_NOT_WELLFORMED$' )) then (
			if( matches_regular_expression( v.message, '^(.+) (XML Format check failed.+) <([a-z ]+)>$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
			);
			else if( matches_regular_expression( v.message, '^(.+) (XML Format check failed.+)$' )) then (
				set_collected_field('', 'url', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
				set_collected_field('', 'result', 'not blocked');
			);
			else (
				set_collected_field('', 'result', 'PARSE ERROR for XML Format check failed');
				set_collected_field('', 'message', v.message);
			);
		);
# AF_MALFORMED_REQ_ERR
		else if( matches_regular_expression( get_collected_field('', 'event_type') , '^AF_MALFORMED_REQ_ERR$' )) then (
			if( matches_regular_expression( v.message, '^(.*)(Malformed multi-part request.+) <([a-z ]+)>$' )) then (
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
			);
			else if( matches_regular_expression( v.message, '^(.*)(Malformed request.+) <([a-z ]+)>$' )) then (
  		  set_collected_field('', 'profile', 'APPFW_RESET');
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
			);
			else (
				set_collected_field('', 'result', 'PARSE ERROR for AF_MALFORMED_REQ_ERR failed');
				set_collected_field('', 'message', v.message);
			);
		);
		
# AF_INVALID_HTTP_HEADER
		else if( matches_regular_expression( get_collected_field('', 'event_type') , '^AF_INVALID_HTTP_HEADER$' )) then (
			if( matches_regular_expression( v.message, '^(.*)(Error while parsing.+) <([a-z ]+)>$' )) then (
				set_collected_field('', 'message', $2);
				set_collected_field('', 'result', $3);
			);
			else (
				set_collected_field('', 'result', 'PARSE ERROR for AF_INVALID_HTTP_HEADER failed');
				set_collected_field('', 'message', v.message);
			);
		);
		
# AF_ORIGIN_SERVER_RESP_MISMATCH_ERR
		else if( matches_regular_expression( get_collected_field('', 'event_type') , '^AF_ORIGIN_SERVER_RESP_MISMATCH_ERR$' )) then (
			if( matches_regular_expression( v.message, '^(.+) <([a-z ]+)>$' )) then (
				set_collected_field('', 'message', $1);
				set_collected_field('', 'result', $2);
			);
		);
		
# default
		else  (
			if( matches_regular_expression( v.message, '^(.+) <([a-z ]+)>$' )) then (
				set_collected_field('', 'message', $1);
				set_collected_field('', 'result', $2);
			);
		);


		if( get_collected_field('', 'event_type') ne 'DENYURL' ) then (
			if (matches_regular_expression( get_collected_field('', 'url') , '^([^?]+)([?])?(.*)$') ) then (
				set_collected_field('', 'url', $1 );
				set_collected_field('', 'parameters', $3 );
			);
		);
				
		if (matches_regular_expression( get_collected_field('', 'url') , 'https?://([^/]+)') ) then (
			set_collected_field('', 'server_hostname', $1 );
		);

# APPFW Message APPFW_POLICY_HIT_BUILTIN
	) else if ( matches_regular_expression( v.syslog_message, '^[0-9A-Za-z ]*APPFW Message[ ]+[0-9]+[ ]+[0-9]+[ ]+:[ ]+"APPFW_POLICY_HIT_BUILTIN[ ]+([^ ]+)[ ]+-[ ]+(.*)$' )) then (
		set_collected_field('', 'event_type', $1);
		set_collected_field('', 'profile', 'APPFW_POLICY_HIT_BUILTIN');
		set_collected_field('', 'message', $2);

    if( matches_regular_expression( get_collected_field('', 'event_type') , '^REQ_INVALID_METHOD$' )) then (
			if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+([^ ]+)[ ][ ](.*) <([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'message', "Method:". $2);
				set_collected_field('', 'server_hostname', "");
				set_collected_field('', 'url', $3);
				set_collected_field('', 'result', $4);
			);
			else if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+([^ ]+)[ ]([^ ]+)[ ]+(.*) <([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'message', "Method:". $2);
				set_collected_field('', 'server_hostname', $3);
				set_collected_field('', 'url', $4);
				set_collected_field('', 'result', $5);
			);
			else (
		    set_collected_field('', 'result', 'PARSE_ERROR_FOR_REQ_INVALID_METHOD');
		  );
			if (matches_regular_expression( get_collected_field('', 'url') , '^([^?]+)([?])?(.*)$') ) then (
				set_collected_field('', 'url', $1 );
				set_collected_field('', 'parameters', $3 );
			);
		);
    else if( matches_regular_expression( get_collected_field('', 'event_type') , '^REQ_HACKER_IP$' )) then (
			if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+(XFF:[ ][^ ]*)[ ]([^ ]+)[ ]+([^ ]+)[ ]+(.*) <([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'server_hostname', $4);
				set_collected_field('', 'url', $5);
				set_collected_field('', 'result', $6);
			);
			else if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+[^ ]+[ ]+([^ ]+)[ ]+(.*) <([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'server_hostname', $2);
				set_collected_field('', 'url', $3);
				set_collected_field('', 'result', $4);
			);
			else (
		    set_collected_field('', 'result', 'PARSE_ERROR_FOR_REQ_HACKER_IP');
		  );
			if (matches_regular_expression( get_collected_field('', 'url') , '^([^?]+)([?])?(.*)$') ) then (
				set_collected_field('', 'url', $1 );
				set_collected_field('', 'parameters', $3 );
			);
		);
    else if( matches_regular_expression( get_collected_field('', 'event_type') , '^REQ_WEBSCANNER$' )) then (
			if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+[^ ]+[ ][ ](.*)[ ]+(UserAgent:.*)[ ]+<([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'server_hostname', "");
				set_collected_field('', 'url', $2);
				set_collected_field('', 'message', $3);
				set_collected_field('', 'result', $4);
			);
			else if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+[^ ]+[ ]+([^ ]+)[ ]+(.*)[ ]+(UserAgent:.*)[ ]+<([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'server_hostname', $2);
				set_collected_field('', 'url', $3);
				set_collected_field('', 'message', $4);
				set_collected_field('', 'result', $5);
			);
			else (
		    set_collected_field('', 'result', 'PARSE_ERROR_FOR_REQ_WEBSCANNER');
		  );
			if (matches_regular_expression( get_collected_field('', 'url') , '^([^?]+)([?])?(.*)$') ) then (
				set_collected_field('', 'url', $1 );
				set_collected_field('', 'parameters', $3 );
			);
		);
    else if( matches_regular_expression( get_collected_field('', 'event_type') , '^REQ_UNKNOW_UPLOAD$' )) then (
			if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+([^ ]+)[ ]+([^ ]+)[ ]+(.*)[ ]+<([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'server_hostname', $2);
				set_collected_field('', 'url', $3);
				set_collected_field('', 'message', $4);
				set_collected_field('', 'result', $5);
			);
			else (
		    set_collected_field('', 'result', 'PARSE_ERROR_FOR_REQ_UNKNOW_UPLOAD');
		  );
			if (matches_regular_expression( get_collected_field('', 'url') , '^([^?]+)([?])?(.*)$') ) then (
				set_collected_field('', 'url', $1 );
				set_collected_field('', 'parameters', $3 );
			);
		);
    else if( matches_regular_expression( get_collected_field('', 'event_type') , '^REQ_SCANNER$' )) then (
			if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+([^ ]+)[ ][ ](.*) <([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'message', "Method:". $2);
				set_collected_field('', 'server_hostname', "");
				set_collected_field('', 'url', $3);
				set_collected_field('', 'result', $4);
			);
			else if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+([^ ]+)[ ]+([^ ]+)[ ]+(.*) <([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'message', "Method:". $2);
				set_collected_field('', 'server_hostname', $3);
				set_collected_field('', 'url', $4);
				set_collected_field('', 'result', $5);
			);
			else (
		    set_collected_field('', 'result', 'PARSE_ERROR_FOR_REQ_SCANNER');
		  );

			if (matches_regular_expression( get_collected_field('', 'url') , '^([^?]+)([?])?(.*)$') ) then (
				set_collected_field('', 'url', $1 );
				set_collected_field('', 'parameters', $3 );
			);
		);
    else if( matches_regular_expression( get_collected_field('', 'event_type') , '^REQ_INVALID_PROTOCOL$' )) then (
			if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+Method:[ ]+(.*)[ ]+Host:[ ]+(.*)[ ]+URL:[ ]+(.*)[ ]+(Proto: .*)[ ]+<([a-z ]+)>["]$' )) then (                                             
				set_collected_field('', 'source_ip', $1);                                                                                                                                                               
				set_collected_field('', 'method', $2);                                                                                                                                                           
				set_collected_field('', 'server_hostname', $3);                                                                                                                                                         
				set_collected_field('', 'url', $4);                                                                                                                                                                     
				set_collected_field('', 'message', $5);                                                                                                                                   
				set_collected_field('', 'result', $6);                                                                                                                                                                  
			);                                                                                          
			else if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+[^ ]+[ ]+([^ ]+)[ ]+([^ ]+)[ ]+([^ ]*)[ ]+(.*) <([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'server_hostname', $2);
				set_collected_field('', 'url', $3);
				set_collected_field('', 'message', "Proto:". $4 ." Useragent:". $5 );
				set_collected_field('', 'result', $6);
			);
			else if ( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+[^ ]+[ ](.*)[ ]([^ ]+)[ ](.*)[ ](.*) <([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'server_hostname', $2);
				set_collected_field('', 'url', $3);
				set_collected_field('', 'message', "Proto:". $4 ." Useragent:". $5 );
				set_collected_field('', 'result', $6);
			);
			else (
		    set_collected_field('', 'result', 'PARSE_ERROR_FOR_REQ_INVALID_PROTOCOL');
		  );
			if (matches_regular_expression( get_collected_field('', 'url') , '^([^?]+)([?])?(.*)$') ) then (
				set_collected_field('', 'url', $1 );
				set_collected_field('', 'parameters', $3 );
			);
		);
    else if( matches_regular_expression( get_collected_field('', 'event_type') , '^REQ_INVALID_HOST$' )) then (
			if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+[^ ]+[ ][ ](.*) <([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'message', "");
				set_collected_field('', 'server_hostname', "");
				set_collected_field('', 'url', $2);
				set_collected_field('', 'result', $3);
			);
			else if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+[^ ]+[ ]+([^ ]+)[ ]+(.*) <([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'message', "");
				set_collected_field('', 'server_hostname', $2);
				set_collected_field('', 'url', $3);
				set_collected_field('', 'result', $4);
			);
			else (
		    set_collected_field('', 'result', 'PARSE_ERROR_FOR_FOR_REQ_INVALID_HOST');
		  );
			if (matches_regular_expression( get_collected_field('', 'url') , '^([^?]+)([?])?(.*)$') ) then (
				set_collected_field('', 'url', $1 );
				set_collected_field('', 'parameters', $3 );
			);
		);
    else if( matches_regular_expression( get_collected_field('', 'event_type') , '^REQ_INVALID_REFERER$' )) then (
			if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+([^ ]+)[ ]+([^ ]+)[ ]+(.*)[ ]+(Referer: .*)[ ]+<([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'method', $2);
				set_collected_field('', 'server_hostname', $3);
				set_collected_field('', 'url', $4);
				set_collected_field('', 'message', $5);
				set_collected_field('', 'result', $6);
			);
			else if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+([^ ]+)[ ]+([^ ]+)[ ]+([^ ]+)[ ](.*)[ ]+<([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'method', $2);
				set_collected_field('', 'server_hostname', $3);
				set_collected_field('', 'url', $4);
				set_collected_field('', 'message', "Referer: ". $5);
				set_collected_field('', 'result', $6);
			);
			else (
		    set_collected_field('', 'result', 'PARSE_ERROR_FOR_REQ_INVALID_REFERER');
		  );
			if (matches_regular_expression( get_collected_field('', 'url') , '^([^?]+)([?])?(.*)$') ) then (
				set_collected_field('', 'url', $1 );
				set_collected_field('', 'parameters', $3 );
			);
		);
    else if( matches_regular_expression( get_collected_field('', 'event_type') , '^REQ_INVALID_XFF$' )) then (
			if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+(XFF: [ 0-9.,;]+)[ ]+([^ ]+)[ ]+([^ ]+)[ ]+(.*)[ ]+(Via: .*)[ ]+<([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'message', $2 . $6);
				set_collected_field('', 'method', $3);
				set_collected_field('', 'server_hostname', $4);
				set_collected_field('', 'url', $5);
				set_collected_field('', 'result', $7);
			);
			else if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+(XFF: [ 0-9.,;]+)[ ]+([^ ]+)[ ]+([^ ]+)[ ]+(.*)[ ]+<([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'method', $3);
				set_collected_field('', 'server_hostname', $4);
				set_collected_field('', 'url', $5);
				set_collected_field('', 'result', $6);
			);
			else (
		    set_collected_field('', 'result', 'PARSE_ERROR_FOR_REQ_INVALID_XFF');
		  );
			if (matches_regular_expression( get_collected_field('', 'url') , '^([^?]+)([?])?(.*)$') ) then (
				set_collected_field('', 'url', $1 );
				set_collected_field('', 'parameters', $3 );
			);
		);
    else if( matches_regular_expression( get_collected_field('', 'event_type') , '^REQ_CVE-2014-6271\(Shellshock\)$' )) then (
			if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+([^ ]+)[ ]+([^ ]+)[ ]+(.*)[ ]+<([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'method', $2);
				set_collected_field('', 'server_hostname', $3);
				set_collected_field('', 'url', $4);
				set_collected_field('', 'result', $5);
			);
			else (
		    set_collected_field('', 'result', 'PARSE_ERROR_FOR_FOR_REQ_CVE-2014-6271');
		  );
			if (matches_regular_expression( get_collected_field('', 'url') , '^([^?]+)([?])?(.*)$') ) then (
				set_collected_field('', 'url', $1 );
				set_collected_field('', 'parameters', $3 );
			);
		);
    else if( matches_regular_expression( get_collected_field('', 'event_type') , '^REQ_CVE-2015-4024$' )) then (
			if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+([^ ]+)[ ]+([^ ]+)[ ]+(.*)[ ]+<([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'server_hostname', $2);
				set_collected_field('', 'url', $3);
				set_collected_field('', 'message', $4);
				set_collected_field('', 'result', $5);
			);
			else (
		    set_collected_field('', 'result', 'PARSE_ERROR_FOR_FOR_REQ_CVE-2015-4024');
		  );
			if (matches_regular_expression( get_collected_field('', 'url') , '^([^?]+)([?])?(.*)$') ) then (
				set_collected_field('', 'url', $1 );
				set_collected_field('', 'parameters', $3 );
			);
		);
    else if( matches_regular_expression( get_collected_field('', 'event_type') , '^REQ_CVE-2013-2248$' )) then (
			if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+([^ ]+)[ ]+([^ ]+)[ ]+(.*)[ ]+<([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'server_hostname', $2);
				set_collected_field('', 'url', $3);
				set_collected_field('', 'message', $4);
				set_collected_field('', 'result', $5);
			);
			else (
		    set_collected_field('', 'result', 'PARSE_ERROR_FOR_FOR_REQ_CVE-2013-2248');
		  );
			if (matches_regular_expression( get_collected_field('', 'url') , '^([^?]+)([?])?(.*)$') ) then (
				set_collected_field('', 'url', $1 );
				set_collected_field('', 'parameters', $3 );
			);
		);
    else if( matches_regular_expression( get_collected_field('', 'event_type') , '^REQ_INVALID_USERAGENT$' )) then (
      if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+[^ ]+[ ]+([^ ]+)[ ]+(.*)[ ]+UA:[ ]+(.*)[ ]+<([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'server_hostname', $2);
				set_collected_field('', 'url', $3);
				set_collected_field('', 'message', "User-agent: ". $4 );
				set_collected_field('', 'result', $5);
			);
			else if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+[^ ]+[ ]+([^ ]+)[ ]+(.*)[ ]+([^ ]+)[ ]+<([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'server_hostname', $2);
				set_collected_field('', 'message', "Useragent:". $3 );
				set_collected_field('', 'url', $4);
				set_collected_field('', 'result', $5);
			);
			else (
		    set_collected_field('', 'result', 'PARSE_ERROR_FOR_FOR_REQ_INVALID_USERAGENT');
		  );
			if (matches_regular_expression( get_collected_field('', 'url') , '^([^?]+)([?])?(.*)$') ) then (
				set_collected_field('', 'url', $1 );
				set_collected_field('', 'parameters', $3 );
			);
		);
    else if( matches_regular_expression( get_collected_field('', 'event_type') , '^REQ_MALICIOUS_COOKIE$' )) then (
			if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+([^ ]+)[ ]+([^ ]+)[ ]+(Cookie : [^ ]+)[ ]+(.*)[ ]+<([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'method', $2);
				set_collected_field('', 'server_hostname', $3);
				set_collected_field('', 'url', $4);
				set_collected_field('', 'message', $5 );
				set_collected_field('', 'result', $6);
			);
			else if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+([^ ]+)[ ]+([^ ]+)[ ]+([^ ]+)[ ]+(Cookie : .*)$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'method', $2);
				set_collected_field('', 'server_hostname', $3);
				set_collected_field('', 'url', $4);
				set_collected_field('', 'message', $5 );
				set_collected_field('', 'result', "blocked");
			);
			else (
		    set_collected_field('', 'result', 'PARSE_ERROR_FOR_FOR_REQ_MALICIOUS_COOKIE');
		  );
			if (matches_regular_expression( get_collected_field('', 'url') , '^([^?]+)([?])?(.*)$') ) then (
				set_collected_field('', 'url', $1 );
				set_collected_field('', 'parameters', $3 );
			);
		);
    else if( matches_regular_expression( get_collected_field('', 'event_type') , '^REQ_MULTIPLE_COOKIE$' )) then (
			if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+[^ ]+[ ]+([^ ]+)[ ]+([^ ]+)[ ]+(.*)[ ]+<([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'server_hostname', $2);
				set_collected_field('', 'url', $3);
				set_collected_field('', 'message', $4 );
				set_collected_field('', 'result', $5);
			);
			else (
		    set_collected_field('', 'result', 'PARSE_ERROR_FOR_FOR_REQ_MULTIPLE_COOKIE');
		  );
			if (matches_regular_expression( get_collected_field('', 'url') , '^([^?]+)([?])?(.*)$') ) then (
				set_collected_field('', 'url', $1 );
				set_collected_field('', 'parameters', $3 );
			);
		);
    else if( matches_regular_expression( get_collected_field('', 'event_type') , '^REQ_IPREP_?(SCANNERS|WEB_ATTACKS|$)' )) then (
			if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+([^ ]+)[ ][ ]+([^ ]+)[ ](UserAgent:.*)[ ]+<([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'method', $2);
				set_collected_field('', 'server_hostname', "");
				set_collected_field('', 'url', $3);
				set_collected_field('', 'message', $4);
				set_collected_field('', 'result', $5);
			);
			else if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+([^ ]+)[ ]+([^ ]+)[ ]+([^ ]+)[ ](UserAgent:.*)[ ]+<([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'method', $2);
				set_collected_field('', 'server_hostname', $3);
				set_collected_field('', 'url', $4);
				set_collected_field('', 'message', $5);
				set_collected_field('', 'result', $6);
			);
			else (
		    set_collected_field('', 'result', 'PARSE_ERROR_FOR_REQ_IPREP');
		  );
			if (matches_regular_expression( get_collected_field('', 'url') , '^([^?]+)([?])?(.*)$') ) then (
				set_collected_field('', 'url', $1 );
				set_collected_field('', 'parameters', $3 );
			);
		);
    else if( matches_regular_expression( get_collected_field('', 'event_type') , '^REQ_IPREP_XFF$' )) then (
			if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+(XFF: [^ ]+)[ ]+([^ ]+)[ ]+([^ ]+)[ ]+(.*)[ ]+<([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'message', $2);
				set_collected_field('', 'method', $3);
				set_collected_field('', 'server_hostname', $4);
				set_collected_field('', 'url', $5);
				set_collected_field('', 'result', $6);
			);
			else (
		    set_collected_field('', 'result', 'PARSE_ERROR_FOR_REQ_IPREP_XFF');
		  );
			if (matches_regular_expression( get_collected_field('', 'url') , '^([^?]+)([?])?(.*)$') ) then (
				set_collected_field('', 'url', $1 );
				set_collected_field('', 'parameters', $3 );
			);
		);
    else if( matches_regular_expression( get_collected_field('', 'event_type') , '^REQ_INVALID_CONTENTTYPE$' )) then (
			if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+([^ ]+)[ ]+([^ ]+)[ ]+(.*)[ ]+(Content-Type: .*)[ ]+<([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'method', $2);
				set_collected_field('', 'server_hostname', $3);
				set_collected_field('', 'url', $4);
				set_collected_field('', 'message', $5);
				set_collected_field('', 'result', $6);
			);
			else if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+([^ ]+)[ ]+([^ ]+)[ ]+(.*)[ ]+(Content-Type: .*)$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'method', $2);
				set_collected_field('', 'server_hostname', $3);
				set_collected_field('', 'url', $4);
				set_collected_field('', 'message', $5);
				set_collected_field('', 'result', "blocked");
			);
			else (
		    set_collected_field('', 'result', 'PARSE_ERROR_FOR_REQ_INVALID_CONTENTTYPE');
		  );
			if (matches_regular_expression( get_collected_field('', 'url') , '^([^?]+)([?])?(.*)$') ) then (
				set_collected_field('', 'url', $1 );
				set_collected_field('', 'parameters', $3 );
			);
		);
    else if( matches_regular_expression( get_collected_field('', 'event_type') , '^REQ_INVALID_CONTENTDISPOSITION$' )) then (
			if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+([^ ]+)[ ]+([^ ]+)[ ]+(.*)[ ]+(Content-Disposition.*)[ ]+<([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'method', $2);
				set_collected_field('', 'server_hostname', $3);
				set_collected_field('', 'url', $4);
				set_collected_field('', 'message', $5);
				set_collected_field('', 'result', $6);
			);
			else (
		    set_collected_field('', 'result', 'PARSE_ERROR_FOR_REQ_INVALID_CONTENTDISPOSITION');
		  );
			if (matches_regular_expression( get_collected_field('', 'url') , '^([^?]+)([?])?(.*)$') ) then (
				set_collected_field('', 'url', $1 );
				set_collected_field('', 'parameters', $3 );
			);
		);
    else if( matches_regular_expression( get_collected_field('', 'event_type') , '^REQ_INVALID_HEADER_NEWLINE$' )) then (
			if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+([^ ]+)[ ]+([^ ]+)[ ]+(.*)[ ]+(header .*)[ ]+<([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'method', $2);
				set_collected_field('', 'server_hostname', $3);
				set_collected_field('', 'url', $4);
				set_collected_field('', 'message', $5);
				set_collected_field('', 'result', $6);
			);
			else (
		    set_collected_field('', 'result', 'PARSE_ERROR_FOR_REQ_INVALID_HEADER_NEWLINE');
		  );
			if (matches_regular_expression( get_collected_field('', 'url') , '^([^?]+)([?])?(.*)$') ) then (
				set_collected_field('', 'url', $1 );
				set_collected_field('', 'parameters', $3 );
			);
		);
    else (
			if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+([^ ]+)[ ]+([^ ]+)[ ]+(.*)[ ]+<([a-z ]+)>["]$' )) then (
				set_collected_field('', 'source_ip', $1);
				set_collected_field('', 'server_hostname', $2);
				set_collected_field('', 'url', $3);
				set_collected_field('', 'message', $4);
				set_collected_field('', 'result', $5);
			);
			else (
		    set_collected_field('', 'result', 'PARSE_ERROR_FOR_FOR_APPFW_POLICY_HIT_BUILTIN');
		    set_collected_field('', 'message', v.message);
		  );
			if (matches_regular_expression( get_collected_field('', 'url') , '^([^?]+)([?])?(.*)$') ) then (
				set_collected_field('', 'url', $1 );
				set_collected_field('', 'parameters', $3 );
			);
		);

# APPFW STARTURL
	) else if ( matches_regular_expression( v.syslog_message, '^[0-9A-Za-z ]*APPFW Message[ ]+[0-9]+[ ]+[0-9]+[ ]+:[ ]+"APPFW_POLICY_HIT[ ]+STARTURL[ ]+-[ ]+(.*)$' )) then (
		set_collected_field('', 'event_type', 'STARTURL_REFERER');
		set_collected_field('', 'profile', 'APPFW_POLICY_HIT_BUILTIN');
		set_collected_field('', 'message', $1);
  	if( matches_regular_expression( get_collected_field('', 'message'), '^([.:0-9]+)[ ]+Host:[ ]+([^ ]+)[ ]+URL:[ ]+(.*)[ ]+(Referer:[ ]+.*)"$' )) then (
			set_collected_field('', 'source_ip', $1);
			set_collected_field('', 'server_hostname', $2);
			set_collected_field('', 'url', $3);
			set_collected_field('', 'message', $4);
			set_collected_field('', 'result', 'blocked');
		);

# APPFW Others
	) else if (matches_regular_expression(v.syslog_message, '^APPFW(_RESP)? (APPFW_[^ ]+) (.+) <([a-z ]+)>$' )) then (
		set_collected_field('', 'event_type', replace_first( $2, 'APPFW_', '' ) );
		set_collected_field('', 'url', '');
		set_collected_field('', 'message', $3);
		set_collected_field('', 'result', $4);
		if( matches_regular_expression( get_collected_field('', 'message'), 'for( field | header | cookie | )([^ =]+)' )) then (
		  set_collected_field('', 'field', $2);
		);
	) else if (matches_regular_expression(v.syslog_message, '^APPFW AF_400_RESP [0-9]+ :[ ]+([0-9a-z.:]+)[ ](http[^"]+)?"(.+)"$')) then (	
#		set_collected_field('', 'event_type', 'Protocol ERROR' );
		set_collected_field('', 'profile', 'APPFW_RESET');
		set_collected_field('', 'source_ip', $1);
		set_collected_field('', 'url', $2);
		set_collected_field('', 'message', replace_last( replace_first( $3, '"', '' ), '"', '' ));
		set_collected_field('', 'result', 'blocked');
		if (matches_regular_expression( get_collected_field('', 'url') , 'https?://([^/]+)') ) then (
			set_collected_field('', 'server_hostname', $1 );
		);
	) else if ( matches_regular_expression( v.syslog_message, '^(http[^ ]+)?(.+) <([a-z ]+)>$' )) then (
		set_collected_field('', 'url', $1);
		set_collected_field('', 'message', $2);
		set_collected_field('', 'result', $3);
	) else if ( matches_regular_expression( v.syslog_message, '^APPFW (Message .*)$' )) then (
		set_collected_field('', 'event_type', 'System Message');
		set_collected_field('', 'source_ip', '');
#   set_collected_field('', 'session_id', '');
		set_collected_field('', 'profile', '');
		set_collected_field('', 'url', '');
		set_collected_field('', 'message', $1);
		set_collected_field('', 'result', '');
  ) else if ( matches_regular_expression( v.syslog_message, '^APPFW (AF_MEMORY_ERR.*)$' )) then (	
		set_collected_field('', 'event_type', 'System Message');
		set_collected_field('', 'message', $1);
	) else (
		set_collected_field('', 'result', 'PARSE ERROR0');
		set_collected_field('', 'message', v.syslog_message);
	);
	accept_collected_entry('', false);
);
else (
	log.events = 0;
);